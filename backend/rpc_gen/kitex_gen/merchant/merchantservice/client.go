// Code generated by Kitex v0.9.1. DO NOT EDIT.

package merchantservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	merchant "github.com/tiktokmall/backend/rpc_gen/kitex_gen/merchant"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetMerchant(ctx context.Context, Req *merchant.GetMerchantReq, callOptions ...callopt.Option) (r *merchant.GetMerchantResp, err error)
	AddMerchant(ctx context.Context, Req *merchant.AddMerchantReq, callOptions ...callopt.Option) (r *merchant.AddMerchantResp, err error)
	AddProduct(ctx context.Context, Req *merchant.AddProductReq, callOptions ...callopt.Option) (r *merchant.AddProductResp, err error)
	DeleteProduct(ctx context.Context, Req *merchant.DeleteProductReq, callOptions ...callopt.Option) (r *merchant.DeleteProductResp, err error)
	UpdateProduct(ctx context.Context, Req *merchant.UpdateProductReq, callOptions ...callopt.Option) (r *merchant.UpdateProductResp, err error)
	SearchProducts(ctx context.Context, Req *merchant.SearchProductsReq, callOptions ...callopt.Option) (r *merchant.SearchProductsResp, err error)
	ProductDetail(ctx context.Context, Req *merchant.ProductDetailReq, callOptions ...callopt.Option) (r *merchant.ProductDetailResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kMerchantServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kMerchantServiceClient struct {
	*kClient
}

func (p *kMerchantServiceClient) GetMerchant(ctx context.Context, Req *merchant.GetMerchantReq, callOptions ...callopt.Option) (r *merchant.GetMerchantResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMerchant(ctx, Req)
}

func (p *kMerchantServiceClient) AddMerchant(ctx context.Context, Req *merchant.AddMerchantReq, callOptions ...callopt.Option) (r *merchant.AddMerchantResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddMerchant(ctx, Req)
}

func (p *kMerchantServiceClient) AddProduct(ctx context.Context, Req *merchant.AddProductReq, callOptions ...callopt.Option) (r *merchant.AddProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddProduct(ctx, Req)
}

func (p *kMerchantServiceClient) DeleteProduct(ctx context.Context, Req *merchant.DeleteProductReq, callOptions ...callopt.Option) (r *merchant.DeleteProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteProduct(ctx, Req)
}

func (p *kMerchantServiceClient) UpdateProduct(ctx context.Context, Req *merchant.UpdateProductReq, callOptions ...callopt.Option) (r *merchant.UpdateProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateProduct(ctx, Req)
}

func (p *kMerchantServiceClient) SearchProducts(ctx context.Context, Req *merchant.SearchProductsReq, callOptions ...callopt.Option) (r *merchant.SearchProductsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchProducts(ctx, Req)
}

func (p *kMerchantServiceClient) ProductDetail(ctx context.Context, Req *merchant.ProductDetailReq, callOptions ...callopt.Option) (r *merchant.ProductDetailResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProductDetail(ctx, Req)
}
