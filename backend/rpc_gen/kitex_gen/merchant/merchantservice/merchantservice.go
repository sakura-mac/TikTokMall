// Code generated by Kitex v0.9.1. DO NOT EDIT.

package merchantservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	merchant "github.com/tiktokmall/backend/rpc_gen/kitex_gen/merchant"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetMerchant": kitex.NewMethodInfo(
		getMerchantHandler,
		newGetMerchantArgs,
		newGetMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AddProduct": kitex.NewMethodInfo(
		addProductHandler,
		newAddProductArgs,
		newAddProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteProduct": kitex.NewMethodInfo(
		deleteProductHandler,
		newDeleteProductArgs,
		newDeleteProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateProduct": kitex.NewMethodInfo(
		updateProductHandler,
		newUpdateProductArgs,
		newUpdateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SearchProducts": kitex.NewMethodInfo(
		searchProductsHandler,
		newSearchProductsArgs,
		newSearchProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ProductDetail": kitex.NewMethodInfo(
		productDetailHandler,
		newProductDetailArgs,
		newProductDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	merchantServiceServiceInfo                = NewServiceInfo()
	merchantServiceServiceInfoForClient       = NewServiceInfoForClient()
	merchantServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return merchantServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return merchantServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return merchantServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "MerchantService"
	handlerType := (*merchant.MerchantService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "merchant",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func getMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(merchant.GetMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(merchant.MerchantService).GetMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMerchantArgs:
		success, err := handler.(merchant.MerchantService).GetMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMerchantArgs() interface{} {
	return &GetMerchantArgs{}
}

func newGetMerchantResult() interface{} {
	return &GetMerchantResult{}
}

type GetMerchantArgs struct {
	Req *merchant.GetMerchantReq
}

func (p *GetMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(merchant.GetMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMerchantArgs) Unmarshal(in []byte) error {
	msg := new(merchant.GetMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMerchantArgs_Req_DEFAULT *merchant.GetMerchantReq

func (p *GetMerchantArgs) GetReq() *merchant.GetMerchantReq {
	if !p.IsSetReq() {
		return GetMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMerchantResult struct {
	Success *merchant.GetMerchantResp
}

var GetMerchantResult_Success_DEFAULT *merchant.GetMerchantResp

func (p *GetMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(merchant.GetMerchantResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMerchantResult) Unmarshal(in []byte) error {
	msg := new(merchant.GetMerchantResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMerchantResult) GetSuccess() *merchant.GetMerchantResp {
	if !p.IsSetSuccess() {
		return GetMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*merchant.GetMerchantResp)
}

func (p *GetMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMerchantResult) GetResult() interface{} {
	return p.Success
}

func addProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(merchant.AddProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(merchant.MerchantService).AddProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddProductArgs:
		success, err := handler.(merchant.MerchantService).AddProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddProductArgs() interface{} {
	return &AddProductArgs{}
}

func newAddProductResult() interface{} {
	return &AddProductResult{}
}

type AddProductArgs struct {
	Req *merchant.AddProductReq
}

func (p *AddProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(merchant.AddProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddProductArgs) Unmarshal(in []byte) error {
	msg := new(merchant.AddProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddProductArgs_Req_DEFAULT *merchant.AddProductReq

func (p *AddProductArgs) GetReq() *merchant.AddProductReq {
	if !p.IsSetReq() {
		return AddProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddProductResult struct {
	Success *merchant.AddProductResp
}

var AddProductResult_Success_DEFAULT *merchant.AddProductResp

func (p *AddProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(merchant.AddProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddProductResult) Unmarshal(in []byte) error {
	msg := new(merchant.AddProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddProductResult) GetSuccess() *merchant.AddProductResp {
	if !p.IsSetSuccess() {
		return AddProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*merchant.AddProductResp)
}

func (p *AddProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddProductResult) GetResult() interface{} {
	return p.Success
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(merchant.DeleteProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(merchant.MerchantService).DeleteProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteProductArgs:
		success, err := handler.(merchant.MerchantService).DeleteProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteProductArgs() interface{} {
	return &DeleteProductArgs{}
}

func newDeleteProductResult() interface{} {
	return &DeleteProductResult{}
}

type DeleteProductArgs struct {
	Req *merchant.DeleteProductReq
}

func (p *DeleteProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(merchant.DeleteProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteProductArgs) Unmarshal(in []byte) error {
	msg := new(merchant.DeleteProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteProductArgs_Req_DEFAULT *merchant.DeleteProductReq

func (p *DeleteProductArgs) GetReq() *merchant.DeleteProductReq {
	if !p.IsSetReq() {
		return DeleteProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteProductResult struct {
	Success *merchant.DeleteProductResp
}

var DeleteProductResult_Success_DEFAULT *merchant.DeleteProductResp

func (p *DeleteProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(merchant.DeleteProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteProductResult) Unmarshal(in []byte) error {
	msg := new(merchant.DeleteProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteProductResult) GetSuccess() *merchant.DeleteProductResp {
	if !p.IsSetSuccess() {
		return DeleteProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*merchant.DeleteProductResp)
}

func (p *DeleteProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteProductResult) GetResult() interface{} {
	return p.Success
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(merchant.UpdateProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(merchant.MerchantService).UpdateProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateProductArgs:
		success, err := handler.(merchant.MerchantService).UpdateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateProductArgs() interface{} {
	return &UpdateProductArgs{}
}

func newUpdateProductResult() interface{} {
	return &UpdateProductResult{}
}

type UpdateProductArgs struct {
	Req *merchant.UpdateProductReq
}

func (p *UpdateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(merchant.UpdateProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateProductArgs) Unmarshal(in []byte) error {
	msg := new(merchant.UpdateProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateProductArgs_Req_DEFAULT *merchant.UpdateProductReq

func (p *UpdateProductArgs) GetReq() *merchant.UpdateProductReq {
	if !p.IsSetReq() {
		return UpdateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateProductResult struct {
	Success *merchant.UpdateProductResp
}

var UpdateProductResult_Success_DEFAULT *merchant.UpdateProductResp

func (p *UpdateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(merchant.UpdateProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateProductResult) Unmarshal(in []byte) error {
	msg := new(merchant.UpdateProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateProductResult) GetSuccess() *merchant.UpdateProductResp {
	if !p.IsSetSuccess() {
		return UpdateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*merchant.UpdateProductResp)
}

func (p *UpdateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateProductResult) GetResult() interface{} {
	return p.Success
}

func searchProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(merchant.SearchProductsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(merchant.MerchantService).SearchProducts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SearchProductsArgs:
		success, err := handler.(merchant.MerchantService).SearchProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchProductsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSearchProductsArgs() interface{} {
	return &SearchProductsArgs{}
}

func newSearchProductsResult() interface{} {
	return &SearchProductsResult{}
}

type SearchProductsArgs struct {
	Req *merchant.SearchProductsReq
}

func (p *SearchProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(merchant.SearchProductsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchProductsArgs) Unmarshal(in []byte) error {
	msg := new(merchant.SearchProductsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchProductsArgs_Req_DEFAULT *merchant.SearchProductsReq

func (p *SearchProductsArgs) GetReq() *merchant.SearchProductsReq {
	if !p.IsSetReq() {
		return SearchProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchProductsResult struct {
	Success *merchant.SearchProductsResp
}

var SearchProductsResult_Success_DEFAULT *merchant.SearchProductsResp

func (p *SearchProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(merchant.SearchProductsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchProductsResult) Unmarshal(in []byte) error {
	msg := new(merchant.SearchProductsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchProductsResult) GetSuccess() *merchant.SearchProductsResp {
	if !p.IsSetSuccess() {
		return SearchProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*merchant.SearchProductsResp)
}

func (p *SearchProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchProductsResult) GetResult() interface{} {
	return p.Success
}

func productDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(merchant.ProductDetailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(merchant.MerchantService).ProductDetail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ProductDetailArgs:
		success, err := handler.(merchant.MerchantService).ProductDetail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ProductDetailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newProductDetailArgs() interface{} {
	return &ProductDetailArgs{}
}

func newProductDetailResult() interface{} {
	return &ProductDetailResult{}
}

type ProductDetailArgs struct {
	Req *merchant.ProductDetailReq
}

func (p *ProductDetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(merchant.ProductDetailReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ProductDetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ProductDetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ProductDetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ProductDetailArgs) Unmarshal(in []byte) error {
	msg := new(merchant.ProductDetailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ProductDetailArgs_Req_DEFAULT *merchant.ProductDetailReq

func (p *ProductDetailArgs) GetReq() *merchant.ProductDetailReq {
	if !p.IsSetReq() {
		return ProductDetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ProductDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ProductDetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ProductDetailResult struct {
	Success *merchant.ProductDetailResp
}

var ProductDetailResult_Success_DEFAULT *merchant.ProductDetailResp

func (p *ProductDetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(merchant.ProductDetailResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ProductDetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ProductDetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ProductDetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ProductDetailResult) Unmarshal(in []byte) error {
	msg := new(merchant.ProductDetailResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ProductDetailResult) GetSuccess() *merchant.ProductDetailResp {
	if !p.IsSetSuccess() {
		return ProductDetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ProductDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*merchant.ProductDetailResp)
}

func (p *ProductDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProductDetailResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetMerchant(ctx context.Context, Req *merchant.GetMerchantReq) (r *merchant.GetMerchantResp, err error) {
	var _args GetMerchantArgs
	_args.Req = Req
	var _result GetMerchantResult
	if err = p.c.Call(ctx, "GetMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddProduct(ctx context.Context, Req *merchant.AddProductReq) (r *merchant.AddProductResp, err error) {
	var _args AddProductArgs
	_args.Req = Req
	var _result AddProductResult
	if err = p.c.Call(ctx, "AddProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, Req *merchant.DeleteProductReq) (r *merchant.DeleteProductResp, err error) {
	var _args DeleteProductArgs
	_args.Req = Req
	var _result DeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProduct(ctx context.Context, Req *merchant.UpdateProductReq) (r *merchant.UpdateProductResp, err error) {
	var _args UpdateProductArgs
	_args.Req = Req
	var _result UpdateProductResult
	if err = p.c.Call(ctx, "UpdateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchProducts(ctx context.Context, Req *merchant.SearchProductsReq) (r *merchant.SearchProductsResp, err error) {
	var _args SearchProductsArgs
	_args.Req = Req
	var _result SearchProductsResult
	if err = p.c.Call(ctx, "SearchProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductDetail(ctx context.Context, Req *merchant.ProductDetailReq) (r *merchant.ProductDetailResp, err error) {
	var _args ProductDetailArgs
	_args.Req = Req
	var _result ProductDetailResult
	if err = p.c.Call(ctx, "ProductDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
