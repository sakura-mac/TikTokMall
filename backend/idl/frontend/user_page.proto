syntax = "proto3";

package frontend.user;


import "api.proto";

option go_package = "frontend/user";

enum Gender {
    Unknown = 0;
    Male    = 1;
    Female  = 2;
}

message User {
    int64 user_id = 1;
    string email = 2;
    string password = 3;
    string signature = 4;
    Gender gender = 5;
    string nickname = 6;
}


message UpdateUserReq {
    int64 user_id = 1 [(api.path) = "user_id", (api.vd) = "$>0"];
    string email = 2 [(api.form)="email"];
    string signature = 3 [(api.form)= "signature"];
    Gender gender = 4 [(api.form)= "gender"];
    string password = 5  [(api.form)= "password"];
    string nickname = 6  [(api.form)= "nickname"];
}

message UpdateUserResp {
    int32 status_code = 1 [(api.body) = "status_code"];
    string msg = 2;
}

message QueryUserReq {
    int64 user_id = 1 [(api.path) = "user_id", (api.vd) = "$>0"];
}
message QueryUserResp {
    int32 status_code = 1 [(api.body) = "status_code"];
    string msg = 2;
    User user = 3;
}



message DeleteUserReq {
    int64 user_id = 1 [(api.path) = "user_id", (api.vd) = "$>0"];
}

message DeleteUserResp {
    int32 status_code = 1 [(api.body) = "status_code"];
    string msg = 2;
}

service UserService {
    rpc update(UpdateUserReq) returns (UpdateUserResp) {
        option (api.post) = "/user/update";
    };
    rpc queryUser(QueryUserReq) returns (QueryUserResp) {
        option (api.get) = "/user/query/:user_id";
    }
    rpc deleteUser(DeleteUserReq) returns (DeleteUserResp) {
        option (api.post) = "/user/delete/:user_id";
    }
}